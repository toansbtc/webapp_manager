import React, { useEffect, useState } from 'react'
import Head from "next/head";
import Image from 'next/image'
import { signOut } from 'firebase/auth';
import Active from './views/commonPages/active';
import Home from './views/commonPages/home';
import Yourng from './views/yourngPages';
// import { prisma_sql } from './api/DB/PostgreSQL';
import axios from 'axios';
import Navbar from './views/components/navbar';
import { setInterval } from 'timers';

const page = 'home' || 'active' || 'young'
export default function index() {



  const [isScrolled, setIsScrolled] = useState(false);
  const [link, setLink] = useState<typeof page>('home')
  const [imageList, setImageList] = useState(['https://images.pexels.com/photos/106399/pexels-photo-106399.jpeg?auto=compress&cs=tinysrgb&w=800', 'https://images.pexels.com/photos/186077/pexels-photo-186077.jpeg?auto=compress&cs=tinysrgb&w=800',
    'https://images.pexels.com/photos/323780/pexels-photo-323780.jpeg?auto=compress&cs=tinysrgb&w=800', 'https://images.pexels.com/photos/1396122/pexels-photo-1396122.jpeg?auto=compress&cs=tinysrgb&w=800'
  ])
  const [indexImage, setIndexImage] = useState(0);
  // const [opneImage, setOpenImage] = useState(false)
  // const [currentImageURL, setCurrentImageURL] = useState('')
  // const [video, setVideo] = useState(['https://www.youtube.com/watch?v=ep1_odv7PUY', 'https://www.youtube.com/watch?v=ep1_odv7PUY'])




  let touchStartX = 0;

  const setLinkFromNavbar = (link: typeof page) => {
    setLink(link)
  }

  useEffect(() => {
    const interval = setInterval(() => {
      if (indexImage < imageList.length - 1)
        setIndexImage(indexImage + 1)
      else if (indexImage == imageList.length - 1)
        setIndexImage(0);
    }, 3000)
    const handleScroll = () => {
      const triggerHeight = window.innerHeight / 1.5;

      setIsScrolled(window.scrollY > triggerHeight);
    };

    // Attach scroll event listener
    window.addEventListener('scroll', handleScroll);

    // Clean up the event listener on unmount
    interval;
    return () => {
      // clearInterval(interval)
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  return (
    <>
      <Head>
        <title>Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {link === "home" ? (
        <header className="position-relative">
          {/* Dynamic class applied for scroll effect */}
          <div
            onTouchStart={(e) => {
              touchStartX = e.touches[0].clientX;
            }}
            onTouchEnd={(e) => {
              const touchEndX = e.changedTouches[0].clientX;
              if (touchStartX - touchEndX > 50) {
                // Detect swipe left
                if (indexImage < imageList.length - 1)
                  setIndexImage(indexImage + 1)
              } else if (touchEndX - touchStartX > 50) {
                // Detect swipe right (optional)
                if (0 < indexImage && indexImage <= imageList.length - 1)
                  setIndexImage(indexImage - 1)
              }
            }}
            style={{
              height: '100vh', width: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center', overflow: 'hidden',
              backgroundColor: '#000',
            }}
            className={` bg-image ${isScrolled ? 'scrolled' : ''}`}>

            <button className='icon-right' onClick={() => {
              if (indexImage < imageList.length - 1)
                setIndexImage(indexImage + 1)
            }}>
              {">"}
            </button>
            <button className='icon-left' onClick={() => {
              if (0 < indexImage && indexImage <= imageList.length - 1)
                setIndexImage(indexImage - 1)
            }}>
              {"<"}
            </button>


            <Image
              unoptimized
              src={imageList[indexImage]}
              width={200}
              height={200}
              alt="image"
              style={{ width: '100%', height: '100%', transition: 'transform 0.5s ease', }}
            />

            <div className='dotsContainer '>
              {imageList.map((_, index) => (
                <span
                  key={index}
                  className='dot'
                  style={{
                    backgroundColor: indexImage === index ? '#333' : '#ddd',
                  }}
                  onClick={() => setIndexImage(index)}
                />
              ))}
            </div>


          </div>
          <Navbar setLink={setLinkFromNavbar} style={!isScrolled ? "bg-transparent" : "bg-black"} />
        </header>
      ) : (
        <Navbar setLink={setLinkFromNavbar} style={"bg-black"} />
      )}

      {/* Main Layout */}
      <div className="container-fluid">
        {link === 'active' && (
          <Active />
        )}
        {link === 'home' && (
          <div className={`home-container ${isScrolled ? 'visible' : ''}`}>
            <Home />
          </div>
        )}
        {link === 'young' && (
          <Yourng />
        )}
      </div>





      {/* open view image full screen */}
      {/* {opneImage && (
        <div
          className="modal show"
          style={{ display: 'block', backgroundColor: 'rgba(0,0,0,0.8)' }}
        >
          <div className="modal-dialog modal-dialog-centered">
            <div className="modal-content">
              <div className="modal-header">
                <button
                  type="button"
                  className="btn-close"
                  onClick={() => setOpenImage(false)}
                  aria-label="Close"
                ></button>
              </div>
              <div className="modal-body">
                <Image
                  unoptimized
                  src={currentImageURL}
                  width={200}
                  height={200}
                  alt="Popup image"
                  style={{ width: '100%', height: '100%', objectFit: 'contain' }}
                />
              </div>
            </div>
          </div>
        </div>
      )} */}
    </>
  )
}
